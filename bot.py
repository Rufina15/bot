from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
import os
from dotenv import load_dotenv

# Resume Information
INFO = {
    "en": {
        "name": "Rufina Saiputulina",
        "position": "Mobile Developer (React Native / Android)",
        "email": "saiputulina.rufina@gmail.com",
        "phone": "+7-777-209-12-35",
        "commands": {
            "start": "üëã Hello! I'm *{name}*, a {position}.\n\nHere‚Äôs what you can learn about me:\n"
                     "/education - Education\n/experience - Work Experience\n/projects - Study Projects\n"
                     "/skills - Skills\n/contacts - Contact Information\n/language - Change language",
            "education": "üéì *Education:*\nBachelor of Science in Information Systems\n"
                         "*Suleyman Demirel University*, 2020 ‚Äì 2024\nGPA: 3.27/4.00",
            "experience": "üíº *Work Experience:*\n\nüîπ Tele2/ALTEL | Mobile Developer Intern (June ‚Äì August 2024)\n"
                          "‚Ä¢ Developed a mobile app using React Native CLI.\n"
                          "‚Ä¢ Added new pages and integrated map functionality.\n\n"
                          "üîπ Richstone | Android Developer (March ‚Äì June 2024)\n"
                          "‚Ä¢ Built an Android app using Kotlin and Jetpack Compose.\n"
                          "‚Ä¢ Implemented order screens and route maps.\n\n"
                          "üîπ XXL Mebel | Content Manager (June ‚Äì August 2023)\n"
                          "‚Ä¢ Collected furniture data and calculated prices.",
            "projects": "üìù *Projects:*\n\nüéì *Cargo Management System* - Android app for cargo tracking with notifications.\n"
                        "üöÄ *Drone Optimization* - Reinforcement Learning for route optimization.\n"
                        "üñåÔ∏è *UX/UI Design Project* - Created interactive student test app with branding.",
            "skills": "üõ†Ô∏è *Skills:*\n‚Ä¢ Programming Languages: JavaScript, Kotlin, HTML/CSS\n"
                      "‚Ä¢ Frameworks: React Native, Jetpack Compose\n"
                      "‚Ä¢ Tools: Git, Figma, PostgreSQL\n"
                      "‚Ä¢ Languages: Uyghur, Kazakh, Russian, English, Turkish",
            "contacts": "üìû *Contact Information:*\nüìß Email: {email}\nüì± Phone: {phone}",
            "language": "üåê Please choose your language:"
        }
    },
    "ru": {
        "name": "–†—É—Ñ–∏–Ω–∞ –°–∞–π–ø—É—Ç—É–ª–∏–Ω–∞",
        "position": "–ú–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (React Native / Android)",
        "email": "saiputulina.rufina@gmail.com",
        "phone": "+7-777-209-12-35",
        "commands": {
            "start": "üëã –ü—Ä–∏–≤–µ—Ç! –Ø *{name}*, {position}.\n\n–í–æ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ:\n"
                     "/education - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n/experience - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã\n/projects - –ü—Ä–æ–µ–∫—Ç—ã\n"
                     "/skills - –ù–∞–≤—ã–∫–∏\n/contacts - –ö–æ–Ω—Ç–∞–∫—Ç—ã\n/language - –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫",
            "education": "üéì *–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:*\n–ë–∞–∫–∞–ª–∞–≤—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n"
                         "*–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –°—É–ª–µ–π–º–∞–Ω–∞ –î–µ–º–∏—Ä–µ–ª—è*, 2020 ‚Äì 2024\nGPA: 3.27/4.00",
            "experience": "üíº *–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:*\n\nüîπ Tele2/ALTEL | –ú–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–ò—é–Ω—å ‚Äì –ê–≤–≥—É—Å—Ç 2024)\n"
                          "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ React Native CLI.\n"
                          "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∫–∞—Ä—Ç.\n\n"
                          "üîπ Richstone | Android —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (–ú–∞—Ä—Ç ‚Äì –ò—é–Ω—å 2024)\n"
                          "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ Android-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Kotlin –∏ Jetpack Compose.\n"
                          "‚Ä¢ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤.\n\n"
                          "üîπ XXL Mebel | –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä (–ò—é–Ω—å ‚Äì –ê–≤–≥—É—Å—Ç 2023)\n"
                          "‚Ä¢ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–±–µ–ª–∏ –∏ —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω.",
            "projects": "üìù *–ü—Ä–æ–µ–∫—Ç—ã:*\n\nüéì *–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–∑–∞–º–∏* - Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥—Ä—É–∑–æ–≤.\n"
                        "üöÄ *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –¥—Ä–æ–Ω–∞–º–∏* - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é RL.\n"
                        "üñåÔ∏è *–ü—Ä–æ–µ–∫—Ç UX/UI* - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.",
            "skills": "üõ†Ô∏è *–ù–∞–≤—ã–∫–∏:*\n‚Ä¢ –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: JavaScript, Kotlin, HTML/CSS\n"
                      "‚Ä¢ –§—Ä–µ–π–º–≤–æ—Ä–∫–∏: React Native, Jetpack Compose\n"
                      "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: Git, Figma, PostgreSQL\n"
                      "‚Ä¢ –Ø–∑—ã–∫–∏: –£–π–≥—É—Ä—Å–∫–∏–π, –ö–∞–∑–∞—Ö—Å–∫–∏–π, –†—É—Å—Å–∫–∏–π, –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –¢—É—Ä–µ—Ü–∫–∏–π",
            "contacts": "üìû *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\nüìß Email: {email}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
            "language": "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
        }
    },
    "kk": {
        "name": "–†—É—Ñ–∏–Ω–∞ –°–∞–π–ø—É—Ç—É–ª–∏–Ω–∞",
        "position": "–ú–æ–±–∏–ª—å–¥—ñ ”ô–∑—ñ—Ä–ª–µ—É—à—ñ (React Native / Android)",
        "email": "saiputulina.rufina@gmail.com",
        "phone": "+7-777-209-12-35",
        "commands": {
            "start": "üëã –°”ô–ª–µ–º! –ú–µ–Ω *{name}*, {position}.\n\n–ú–µ–Ω —Ç—É—Ä–∞–ª—ã –±—ñ–ª–µ –∞–ª–∞—Å—ã–∑:\n"
                     "/education - –ë—ñ–ª—ñ–º\n/experience - –ñ“±–º—ã—Å —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ\n/projects - –ñ–æ–±–∞–ª–∞—Ä\n"
                     "/skills - –î–∞“ì–¥—ã–ª–∞—Ä\n/contacts - –ë–∞–π–ª–∞–Ω—ã—Å –∞“õ–ø–∞—Ä–∞—Ç—Ç–∞—Ä—ã\n/language - –¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É",
            "education": "üéì *–ë—ñ–ª—ñ–º—ñ:*\n–ê“õ–ø–∞—Ä–∞—Ç—Ç—ã“õ –∂“Ø–π–µ–ª–µ—Ä –±–∞–∫–∞–ª–∞–≤—Ä—ã\n"
                         "*–°“Ø–ª–µ–π–º–∞–Ω –î–µ–º–∏—Ä–µ–ª –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ*, 2020 ‚Äì 2024\nGPA: 3.27/4.00",
            "experience": "üíº *–ñ“±–º—ã—Å —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ:*\n\nüîπ Tele2/ALTEL | –ú–æ–±–∏–ª—å–¥—ñ ”ô–∑—ñ—Ä–ª–µ—É—à—ñ (–ú–∞—É—Å—ã–º ‚Äì –¢–∞–º—ã–∑ 2024)\n"
                          "‚Ä¢ React Native –∞—Ä“õ—ã–ª—ã “õ–æ—Å—ã–º—à–∞ ”ô–∑—ñ—Ä–ª–µ—É.\n\n"
                          "üîπ Richstone | Android ”ô–∑—ñ—Ä–ª–µ—É—à—ñ (–ù–∞—É—Ä—ã–∑ ‚Äì –ú–∞—É—Å—ã–º 2024)\n"
                          "‚Ä¢ Kotlin –∂”ô–Ω–µ Jetpack Compose –∞—Ä“õ—ã–ª—ã Android “õ–æ—Å—ã–º—à–∞—Å—ã–Ω –∂–∞—Å–∞—É.\n\n"
                          "üîπ XXL Mebel | –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä (–ú–∞—É—Å—ã–º ‚Äì –¢–∞–º—ã–∑ 2023)\n"
                          "‚Ä¢ –ñ–∏“ª–∞–∑–¥–∞—Ä —Ç—É—Ä–∞–ª—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä –∂–∏–Ω–∞—É –∂”ô–Ω–µ –±–∞“ì–∞ –µ—Å–µ–ø—Ç–µ—É.",
            "projects": "üìù *–ñ–æ–±–∞–ª–∞—Ä:*\n\nüéì *–ñ“Ø–∫ –±–∞—Å“õ–∞—Ä—É –∂“Ø–π–µ—Å—ñ* - Android “õ–æ—Å—ã–º—à–∞—Å—ã.\n"
                        "üöÄ *–î—Ä–æ–Ω–º–µ–Ω –æ“£—Ç–∞–π–ª–∞–Ω–¥—ã—Ä—É* - RL –∞—Ä“õ—ã–ª—ã –º–∞—Ä—à—Ä—É—Ç—Ç—ã –æ“£—Ç–∞–π–ª–∞–Ω–¥—ã—Ä—É.\n"
                        "üñåÔ∏è *UX/UI –∂–æ–±–∞—Å—ã* - –°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä “Ø—à—ñ–Ω —Ç–µ—Å—Ç “õ–æ—Å—ã–º—à–∞—Å—ã–Ω—ã“£ –¥–∏–∑–∞–π–Ω—ã.",
            "skills": "üõ†Ô∏è *–î–∞“ì–¥—ã–ª–∞—Ä:*\n‚Ä¢ –ë–∞“ì–¥–∞—Ä–ª–∞–º–∞–ª–∞—É —Ç—ñ–ª–¥–µ—Ä—ñ: JavaScript, Kotlin, HTML/CSS\n"
                      "‚Ä¢ –§—Ä–µ–π–º–≤–æ—Ä–∫—Ç–µ—Ä: React Native, Jetpack Compose\n"
                      "‚Ä¢ “ö“±—Ä–∞–ª–¥–∞—Ä: Git, Figma, PostgreSQL\n"
                      "‚Ä¢ –¢—ñ–ª–¥–µ—Ä: “∞–π“ì—ã—Ä—à–∞, “ö–∞–∑–∞“õ—à–∞, –û—Ä—ã—Å—à–∞, –ê“ì—ã–ª—à—ã–Ω—à–∞, –¢“Ø—Ä—ñ–∫—à–µ",
            "contacts": "üìû *–ë–∞–π–ª–∞–Ω—ã—Å –∞“õ–ø–∞—Ä–∞—Ç—Ç–∞—Ä—ã:*\nüìß Email: {email}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
            "language": "üåê –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:"
        }
    }
}


# Helper function to get user language
def get_language(context):
    return context.user_data.get("language", "ru")

# Language Selection
async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("English üá¨üáß", callback_data="en")],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="ru")],
        [InlineKeyboardButton("“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="kk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    language = query.data
    context.user_data["language"] = language
    await query.answer()
    text = INFO[language]["commands"]["start"].format(
        name=INFO[language]["name"], position=INFO[language]["position"]
    )
    await query.edit_message_text(text=text, parse_mode="Markdown")

# Generalized command handler
async def generic_command(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str):
    language = get_language(context)
    data = INFO.get(language, INFO["en"])
    commands = data["commands"]

    name = data.get("name", "Rufina Saiputulina")
    position = data.get("position", "Mobile Developer")
    email = data.get("email", "not-provided@example.com")
    phone = data.get("phone", "Not Available")

    text = commands[key].format(name=name, position=position, email=email, phone=phone)
    await update.message.reply_text(text, parse_mode="Markdown")

# Commands
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generic_command(update, context, "start")

async def education(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generic_command(update, context, "education")

async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generic_command(update, context, "experience")

async def projects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generic_command(update, context, "projects")

async def skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generic_command(update, context, "skills")

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await generic_command(update, context, "contacts")

# Main
if __name__ == "__main__":
    load_dotenv()
    TOKEN = os.getenv("TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("language", language))
    app.add_handler(CallbackQueryHandler(set_language))
    app.add_handler(CommandHandler("education", education))
    app.add_handler(CommandHandler("experience", experience))
    app.add_handler(CommandHandler("projects", projects))
    app.add_handler(CommandHandler("skills", skills))
    app.add_handler(CommandHandler("contacts", contacts))

    print("Bot is running...")
    app.run_polling()